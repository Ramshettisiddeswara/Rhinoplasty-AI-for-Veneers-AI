from flask import Flask, render_template, request
import cv2
import numpy as np
from werkzeug.utils import secure_filename

app = Flask(__name__)

# Define allowed file extensions
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}

# Function to check if the uploaded file is valid
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Upload route to receive and process images
@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        if 'file' not in request.files:
            return 'No file part'
        file = request.files['file']
        if file.filename == '':
            return 'No selected file'
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file_path = 'static/' + filename
            file.save(file_path)
            modified_image_path = process_image(file_path)
            return render_template('index.html', modified_image=modified_image_path)
    return render_template('index.html')

# Function to process image (detect face and apply nose modification)
def process_image(image_path):
    # Load the image
    img = cv2.imread(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Load a pre-trained face detector
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    
    # Detect faces
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    for (x, y, w, h) in faces:
        # Load the placeholder nose image
        nose_img = cv2.imread('static/nose.jpg')
        nose_resized = cv2.resize(nose_img, (w, h//4))  # Resize to fit the face

        # Place the nose image on the detected face (this is a simple approach)
        img[y + h//2:y + h//2 + nose_resized.shape[0], x:x + nose_resized.shape[1]] = nose_resized

    # Save the modified image
    modified_image_path = 'static/modified_' + image_path.split('/')[-1]
    cv2.imwrite(modified_image_path, img)
    return modified_image_path

if __name__ == "__main__":
    app.run(debug=True)
